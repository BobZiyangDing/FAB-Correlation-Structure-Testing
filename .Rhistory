install.packages("foreach")
install.packages("doParallel")
cores=detectCores()
library(foreach)
library(doParallel)
cores=detectCores()
cores
source("Utils.R")
library(matrixcalc)
library(clusterGeneration)
library(pracma)
library(R2jags)
library(tidyverse)
set.seed(1234)
n <- 1000
p <- 20
mu_X <- runif(p, -100, 100)
mu_y <- c(0)
Sigma_Xy <- genPositiveDefMat(p+1, covMethod = 'eigen')$Sigma
zero_idx <- sort(sample.int(p, 10))
Sigma_Xy[p+1, zero_idx] <- 0
Sigma_Xy[zero_idx, p+1] <- 0
Sigma_X <- Sigma_Xy[-(p+1), -(p+1)]
data_Xy <- gen_nonindpt_data(n, Sigma_Xy, mu_X, mu_y)
X <- t(data_Xy)[-(p+1),]
y <-   t(data_Xy)[(p+1),]
var_y <- Sigma_Xy[p+1, p+1]
std_y <- sqrt(var_y)
library(foreach)
library(doParallel)
n <- 1000
p <- 20
mu_X <- runif(p, -100, 100)
mu_y <- c(0)
Sigma_Xy <- genPositiveDefMat(p+1, covMethod = 'eigen')$Sigma
zero_idx <- sort(sample.int(p, 10))
Sigma_Xy[p+1, zero_idx] <- 0
Sigma_Xy[zero_idx, p+1] <- 0
Sigma_X <- Sigma_Xy[-(p+1), -(p+1)]
data_Xy <- gen_nonindpt_data(n, Sigma_Xy, mu_X, mu_y)
X <- t(data_Xy)[-(p+1),]
y <-   t(data_Xy)[(p+1),]
var_y <- Sigma_Xy[p+1, p+1]
std_y <- sqrt(var_y)
r <- cor(data_Xy)[1:p, p+1]
F_r <- atanh(r)
n.iter = 5000
n.burnin = 3000
alpha = 1
pos_ms <- MVs[[1]]
MVs <- get_nonindpt_mv(Sigma_X, X, y, std_y, n.iter, n.burnin, alpha)
source("Utils.R")
MVs <- get_nonindpt_mv(Sigma_X, X, y, std_y, n.iter, n.burnin, alpha)
source("Utils.R")
MVs <- get_nonindpt_mv(Sigma_X, X, y, std_y, n.iter, n.burnin, alpha)
source("Utils.R")
MVs <- get_nonindpt_mv(Sigma_X, X, y, std_y, n.iter, n.burnin, alpha)
source("Utils.R")
MVs <- get_nonindpt_mv(Sigma_X, X, y, std_y, n.iter, n.burnin, alpha)
source("Utils.R")
MVs <- get_nonindpt_mv(Sigma_X, X, y,  p, n, std_y, n.iter, n.burnin, alpha)
pos_ms <- MVs[[1]]
pos_vs <- MVs[[2]]
pos_ms
MVs
pos_vs <- MVs[2, ]
pos_ms <- MVs[1, ]
pos_vs <- MVs[2, ]
pos_ms
pos_ms <- c(MVs[1, ])
pos_vs <- c(MVs[2, ])
pos_ms
FAB_ps <- c()
UMPU_ps <- c()
for (j in 1:p){
tilde_m <- pos_ms[j]
tilde_v <- pos_vs[j]
umpu_p <- 1 - abs(pnorm(F_r[j]*sqrt(n-3), 0, 1) -
pnorm(-F_r[j]*sqrt(n-3), 0, 1) )
fab_p <- 1 - abs(pnorm(F_r[j]*sqrt(n-3) + 2*tilde_m*sqrt(n-3)/tilde_v , 0, 1) -
pnorm(-F_r[j]*sqrt(n-3), 0, 1) )
# Record Data
FAB_ps <- append(FAB_ps, fab_p)
UMPU_ps <- append(UMPU_ps, umpu_p)
}
plot(UMPU_ps, FAB_ps)
combined_ps <- rbind(UMPU_ps, FAB_ps)
sorted_ps <- combined_ps[,order(combined_ps[1,])]
plot(sorted_ps[1, ],type = "o", col = "red", xlab = "Rank", ylab = "p-value",
main = "P-value vs Rank")
lines(sorted_ps[2, ], type = "o", col = "blue")
true_alter <- combined_ps[, -zero_idx]
true_null <- combined_ps[, zero_idx]
hist(true_null[1,], main = "Distribution of UMPU p-value under true null hypothesis",
xlab = "UMPU P-value",
ylab = "Frequency",
breaks = 20)
hist(true_null[2,], main = "Distribution of FAB p-value under true null hypothesis",
xlab = "FAB P-value",
ylab = "Frequency",
breaks = 20)
hist(true_alter[1,], main = "Distribution of UMPU p-value under false null hypothesis",
xlab = "UMPU P-value",
ylab = "Frequency",
breaks = 20)
hist(true_alter[2,], main = "Distribution of FAB p-value under false null hypothesis",
xlab = "FAB P-value",
ylab = "Frequency",
breaks = 20)
n <- 1000
p <- 100
mu_X <- runif(p, -100, 100)
mu_y <- c(0)
Sigma_Xy <- genPositiveDefMat(p+1, covMethod = 'eigen')$Sigma
zero_idx <- sort(sample.int(p, 50))
Sigma_Xy[p+1, zero_idx] <- 0
Sigma_Xy[zero_idx, p+1] <- 0
Sigma_X <- Sigma_Xy[-(p+1), -(p+1)]
data_Xy <- gen_nonindpt_data(n, Sigma_Xy, mu_X, mu_y)
X <- t(data_Xy)[-(p+1),]
y <-   t(data_Xy)[(p+1),]
var_y <- Sigma_Xy[p+1, p+1]
std_y <- sqrt(var_y)
n <- 1000
p <- 100
mu_X <- runif(p, -100, 100)
mu_y <- c(0)
Sigma_Xy <- genPositiveDefMat(p+1, covMethod = 'eigen')$Sigma
zero_idx <- sort(sample.int(p, 50))
Sigma_Xy[p+1, zero_idx] <- 0
Sigma_Xy[zero_idx, p+1] <- 0
Sigma_X <- Sigma_Xy[-(p+1), -(p+1)]
data_Xy <- gen_nonindpt_data(n, Sigma_Xy, mu_X, mu_y)
X <- t(data_Xy)[-(p+1),]
y <-   t(data_Xy)[(p+1),]
var_y <- Sigma_Xy[p+1, p+1]
std_y <- sqrt(var_y)
r <- cor(data_Xy)[1:p, p+1]
F_r <- atanh(r)
n.iter = 5000
n.burnin = 3000
alpha = 1
MVs <- get_nonindpt_mv(Sigma_X, X, y,  p, n, std_y, n.iter, n.burnin, alpha)
source("Utils.R")
library(matrixcalc)
library(clusterGeneration)
library(pracma)
library(R2jags)
library(tidyverse)
library(foreach)
library(doParallel)
set.seed(1234)
n <- 1000
p <- 50
mu_X <- runif(p, -100, 100)
mu_y <- c(0)
Sigma_Xy <- genPositiveDefMat(p+1, covMethod = 'eigen')$Sigma
zero_idx <- sort(sample.int(p, 25))
Sigma_Xy[p+1, zero_idx] <- 0
Sigma_Xy[zero_idx, p+1] <- 0
Sigma_X <- Sigma_Xy[-(p+1), -(p+1)]
data_Xy <- gen_nonindpt_data(n, Sigma_Xy, mu_X, mu_y)
X <- t(data_Xy)[-(p+1),]
y <-   t(data_Xy)[(p+1),]
var_y <- Sigma_Xy[p+1, p+1]
std_y <- sqrt(var_y)
r <- cor(data_Xy)[1:p, p+1]
F_r <- atanh(r)
n.iter = 5000
n.burnin = 3000
alpha = 1
MVs <- get_nonindpt_mv(Sigma_X, X, y,  p, n, std_y, n.iter, n.burnin, alpha)
n <- 1000
p <- 20
mu_X <- runif(p, -100, 100)
mu_y <- c(0)
Sigma_Xy <- genPositiveDefMat(p+1, covMethod = 'eigen')$Sigma
zero_idx <- sort(sample.int(p, 10))
Sigma_Xy[p+1, zero_idx] <- 0
Sigma_Xy[zero_idx, p+1] <- 0
Sigma_X <- Sigma_Xy[-(p+1), -(p+1)]
data_Xy <- gen_nonindpt_data(n, Sigma_Xy, mu_X, mu_y)
X <- t(data_Xy)[-(p+1),]
y <-   t(data_Xy)[(p+1),]
var_y <- Sigma_Xy[p+1, p+1]
std_y <- sqrt(var_y)
r <- cor(data_Xy)[1:p, p+1]
F_r <- atanh(r)
n.iter = 5000
n.burnin = 3000
alpha = 1
MVs <- get_nonindpt_mv(Sigma_X, X, y,  p, n, std_y, n.iter, n.burnin, alpha)
pos_ms <- c(MVs[1, ])
pos_vs <- c(MVs[2, ])
pos_ms
source("Utils.R")
library(matrixcalc)
library(clusterGeneration)
library(pracma)
library(R2jags)
library(tidyverse)
library(foreach)
library(doParallel)
set.seed(1234)

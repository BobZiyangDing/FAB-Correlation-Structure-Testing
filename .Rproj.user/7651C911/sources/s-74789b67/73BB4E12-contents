pkg_test("MASS")
pkg_test("matrixcalc")
pkg_test("clusterGeneration")
pkg_test("pracma")
pkg_test("Matrix")
pkg_test("tidyverse")
pkg_test("foreach")
pkg_test("doParallel")
pkg_test("hash")
pkg_test("MLmetrics")
pkg_test("abind")

###############################
####### Utility Function ######
###############################

g_legend <- function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}


###########################
###### generate data ######
###########################

gen_sim_data <- function(n, ref_n, p, num_in_group){
  ttl <- p*(p-1)/2
  
  num_groups <- ttl %/% num_in_group
  num_null <- ttl %/% 2
  
  mu <- runif(p, -100, 100)
  eigens <- runif(p, 1, 1000)
  
  Sigma <- as.matrix(c(0))
  
  while(!is.positive.definite(Sigma)){
    Sigma <- genPositiveDefMat(p, covMethod = 'eigen', eigenvalue = eigens)$Sigma
  
    zero_idx <- sample.int(ttl, num_null)
    
    null_idx_cbind <- NULL
    alter_idx_cbind <- NULL
    count <- 1
    for(i in 2:p){
      for(j in 1:(i-1)){
        if(count %in% zero_idx){
          Sigma[i, j] <- 0
          Sigma[j, i] <- 0
          null_idx_cbind <- rbind(null_idx_cbind, c(i, j))
        }
        else{
          alter_idx_cbind <- rbind(alter_idx_cbind, c(i, j))
        }
        count = count + 1
      }
    }
  }
  
  
  data_raw <- data.frame(mvrnorm(n, mu, Sigma))
  data_ref <- data.frame(mvrnorm(ref_n, mu, Sigma))
  
  results <- hash()
  results[["data_raw"]] <- data_raw
  results[["data_ref"]] <- data_ref
  results[["ttl"]] <- ttl
  results[["mu"]] <- mu
  results[["Sigma"]] <- Sigma
  results[["zero_idx"]] <- zero_idx
  results[["null_idx_cbind"]] <- null_idx_cbind
  results[["alter_idx_cbind"]] <- alter_idx_cbind
  results[["count"]] <- count
  results[["num_groups"]] <- num_groups
  results[["num_null"]] <- num_null
  results[["n"]] <- n
  results[["ref_n"]] <- ref_n
  results[["p"]] <- p
  results[["num_in_group"]] <- num_in_group

  return(results)
}

gen_sim_test_data <- function(modeling_data_info, n, missing=0.5){
  mu <- modeling_data_info$mu
  Sigma <- modeling_data_info$Sigma
  p <- modeling_data_info$p
  num_missing <- round(missing * p)
  test_data_truth <- data.frame(mvrnorm(n, mu, Sigma))
  test_data_removed <- test_data_truth
  
  for(row in 1:n){
    test_data_removed[row, sample.int(p, num_missing)] <- NA  
  }
  ttl_missing <- sum(is.na(test_data_removed))
  
  results <- hash()
  results[["test_data_truth"]] <- test_data_truth
  results[["test_data_removed"]] <- test_data_removed
  results[["ttl_missing"]] <- ttl_missing
  
  return(results)
}

gen_indpt_data <- function(n, var_X, mu_X, var_y, mu_y, corr_Xy){
  p <- length(var_X)
  Sigma_X <- diag(var_X)
  
  std_y <- sqrt(var_y)
  std_X <- sqrt(var_X)
  
  cov_Xy_vec <- std_y * std_X * corr_Xy
  Sigma_Xy <- subMtx_to_fullMtx(Sigma_X, cov_Xy_vec, var_y)
  
  mu_Xy <- append(mu_X, mu_y)
  Xy <- mvrnorm(n, mu_Xy, Sigma_Xy)
  
  return(as.matrix(Xy))
}


subMtx_to_fullMtx <- function(subMtx, new_vec, corner){
  fullMtx <- rbind(subMtx, new_vec)
  
  fullMtx <- cbind(fullMtx, append(new_vec, corner))
  return(fullMtx)
}


gen_nonindpt_data <- function(n, Sigma_Xy, mu_X, mu_y){
  mu_Xy <- append(mu_X, mu_y)
  Xy <- mvrnorm(n, mu_Xy, Sigma_Xy)
  
  return(as.matrix(Xy))
}


###########################
########### Algo ##########
###########################

get_comp_results_par <- function(alphas, test_data, data_info, pval_results){
  
  ################################
  # FIRST DEFINE FUNCTION OBJECT #
  ################################
  get_row_mse_ <- function(row_miss, row_truth, mu, Sig){
    num_missing <- sum(is.na(row_miss))

    miss_idx <- which(is.na(row_miss))
    exist_idx <- which(!is.na(row_miss))

    y_2 <- as.numeric(row_miss[1, exist_idx])
    mu_1 <- mu[miss_idx]
    mu_2 <- mu[exist_idx]
    Sig_12 <- Sig[miss_idx, exist_idx]
    Sig_22 <- Sig[exist_idx, exist_idx]

    pred <- mu_1 + Sig_12 %*% inv(Sig_22) %*% (y_2 - mu_2)
    truth <- row_truth[miss_idx]
    row_mse <- mse(pred, truth) / num_missing

    return(row_mse)
  }

  ###################
  # START RIGHT NOW #
  ###################
  FAB_mses <- NULL
  UMPU_mses <- NULL
  
  cores=detectCores()
  cl <- makeCluster(cores[1])
  registerDoParallel(cl)

  results <- foreach(alpha=alphas,
                     .combine=rbind,
                     .verbose=FALSE,
                     .packages=c('pracma', 'mltools', 'Matrix')) %dopar% {
                     FAB_mask <- ifelse(pval_results$FAB_ps <= alpha, 1, 0)
                     UMPU_mask <- ifelse(pval_results$UMPU_ps <= alpha, 1, 0)
                     
                     miss_data <- test_data$test_data_removed
                     truth_data <- test_data$test_data_truth
                     
                     mu_hat <- colMeans(data_info$data_raw)
                     Sigma_raw_hat <- cov(data_info$data_raw)
                     
                     FAB_Sigma_hat <- as.matrix(nearPD(Sigma_raw_hat * FAB_mask, keepDiag=TRUE)$mat)
                     UMPU_Sigma_hat <- as.matrix(nearPD(Sigma_raw_hat * UMPU_mask, keepDiag=TRUE)$mat)
                     
                     colnames(FAB_Sigma_hat) <- seq(1, ncol(FAB_Sigma_hat))
                     rownames(FAB_Sigma_hat) <- seq(1, ncol(FAB_Sigma_hat))
                     colnames(UMPU_Sigma_hat) <- seq(1, ncol(UMPU_Sigma_hat))
                     rownames(UMPU_Sigma_hat) <- seq(1, ncol(UMPU_Sigma_hat))
                     
                     FAB_row_mses <- NULL
                     UMPU_row_mses <- NULL
                     
                     for(row in 1:nrow(miss_data)){
                       row_miss <- miss_data[row, ]
                       row_truth <- truth_data[row, ]
                       
                       FAB_row_mse <- get_row_mse_(row_miss,
                                                   row_truth,
                                                   mu_hat,
                                                   FAB_Sigma_hat)

                       UMPU_row_mse <- get_row_mse_(row_miss,
                                                    row_truth,
                                                    mu_hat,
                                                    UMPU_Sigma_hat)

                       FAB_row_mses <- append(FAB_row_mses, FAB_row_mse)
                       UMPU_row_mses <- append(UMPU_row_mses, UMPU_row_mse)
                     }
                     
                     FAB_mse <- mean(FAB_row_mses)
                     UMPU_mse <- mean(UMPU_row_mses)
                     
                     c(FAB_mse, UMPU_mse, alpha)
                   }
  
  results <- data.frame(results)
  colnames(results) <- c("FAB_mses", "UMPU_mses", "alphas")
  return(results)
}



get_comp_results <- function(alphas, test_data, data_info, pval_results){
  FAB_mses <- NULL
  UMPU_mses <- NULL

  for(alpha in alphas){
    FAB_mask <- ifelse(pval_results$FAB_ps <= alpha, 1, 0)
    UMPU_mask <- ifelse(pval_results$UMPU_ps <= alpha, 1, 0)
    
    miss_data <- test_data$test_data_removed
    truth_data <- test_data$test_data_truth

    data_raw <- data_info$data_raw
    
    mu_hat <- colMeans(data_raw)
    Sigma_raw_hat <- cov(data_raw)
    
    FAB_Sigma_hat <- as.matrix(nearPD(Sigma_raw_hat * FAB_mask, keepDiag=TRUE)$mat)
    UMPU_Sigma_hat <- as.matrix(nearPD(Sigma_raw_hat * UMPU_mask, keepDiag=TRUE)$mat)
    
    colnames(FAB_Sigma_hat) <- seq(1, ncol(FAB_Sigma_hat))
    rownames(FAB_Sigma_hat) <- seq(1, ncol(FAB_Sigma_hat))
    colnames(UMPU_Sigma_hat) <- seq(1, ncol(UMPU_Sigma_hat))
    rownames(UMPU_Sigma_hat) <- seq(1, ncol(UMPU_Sigma_hat))



    FAB_row_mses <- NULL
    UMPU_row_mses <- NULL

    for(row in 1:nrow(miss_data)){
      row_miss <- miss_data[row, ]
      row_truth <- truth_data[row, ]
      
      FAB_row_mse <- get_row_mse(row_miss,
                                 row_truth,
                                 mu_hat,
                                 FAB_Sigma_hat)
      
      UMPU_row_mse <- get_row_mse(row_miss,
                                  row_truth,
                                  mu_hat,
                                  UMPU_Sigma_hat)

      FAB_row_mses <- append(FAB_row_mses, FAB_row_mse)
      UMPU_row_mses <- append(UMPU_row_mses, UMPU_row_mse)
    }

    FAB_mse <- mean(FAB_row_mses)
    UMPU_mse <- mean(UMPU_row_mses)

    FAB_mses <- append(FAB_mses, FAB_mse)
    UMPU_mses <- append(UMPU_mses, UMPU_mse)

    #print(alpha)
  }
  
  result <- data.frame(FAB_mses, UMPU_mses, alphas)
  return(result)
}

get_row_mse <- function(row_miss, row_truth, mu, Sig){
  num_missing <- sum(is.na(row_miss))
  
  miss_idx <- which(is.na(row_miss))
  exist_idx <- which(!is.na(row_miss))
  
  y_2 <- as.numeric(row_miss[1, exist_idx])
  mu_1 <- mu[miss_idx]
  mu_2 <- mu[exist_idx]
  Sig_12 <- Sig[miss_idx, exist_idx]
  Sig_22 <- Sig[exist_idx, exist_idx]
  
  # print(Sig_22)
  
  pred <- mu_1 + Sig_12 %*% inv(Sig_22) %*% (y_2 - mu_2)
  truth <- row_truth[miss_idx]
  
  row_mse <- mse(pred, truth) / num_missing

  return(row_mse)
}


individual_MCMC <- function(j, Sigma_X, X, y, std_y, n.iter, n.burnin, alpha){
  G_j <- nullspace(t(Sigma_X[j,]))
  
  decorr_X <- t(G_j) %*% X
  decorr_Xy <- rbind(decorr_X, y)
  
  CorMatrix_decorr_Xy <- cor(t(decorr_Xy))
  g_r <- CorMatrix_decorr_Xy[p, -p]
  Fg_r <- atanh(g_r) # Test Statistics
  
  
  new_Sigma_X <- t(G_j) %*% Sigma_X %*% G_j
  new_var_X <- diag(new_Sigma_X)
  new_std_X <- sqrt(new_var_X)
  mix_coef <- G_j / new_std_X / std_y
  
  model_jags <- function(){
    for(i in 1:(p-1)){
      Fg_r[i] ~ dnorm(Fg_rho[i], n-3) # It uses precision rather than var here
    }
    
    Fg_rho <- arctanh(g_rho)
    g_rho <- t(mix_coef) %*% rho
    rho <- tanh(F_rho)
    F_rho ~ dmnorm( mu , eye) # It uses precision rather than var here
    mu ~ ddirch( alpha )
  }
  
  jags_data <- list(p=p, n=n, Fg_r=Fg_r, alpha=rep(alpha, p), mix_coef=mix_coef, eye=diag(p))
  jags_sims_mv <- jags(data = jags_data,
                       model.file = model_jags,
                       parameters.to.save = c("F_rho"),
                       n.iter = n.iter,
                       n.burnin = n.burnin,
                       progress.bar = "none")
  
  
  Result <- as.mcmc(jags_sims_mv)
  name <- str_c("F_rho.", j, ".")
  samples <- (data.frame(as.matrix(Result))[name])[,1]
  
  return( c(mean(samples),  var(samples)) )
}

get_nonindpt_mv <- function(Sigma_X, X, y, p, n, std_y, n.iter, n.burnin, alpha){

  cores=detectCores()
  cl <- makeCluster(cores[1]-1) #not to overload your computer
  registerDoParallel(cl)
  
  finalMatrix <- foreach(j=1:p, .combine=cbind, .packages='raster', .verbose=FALSE) %dopar% {
    library(MASS)
    library(matrixcalc)
    library(clusterGeneration)
    library(pracma)
    library(R2jags)
    library(tidyverse)
    
    G_j <- nullspace(t(Sigma_X[j,]))
    
    decorr_X <- t(G_j) %*% X
    decorr_Xy <- rbind(decorr_X, y)
    
    CorMatrix_decorr_Xy <- cor(t(decorr_Xy))
    g_r <- CorMatrix_decorr_Xy[p, -p]
    Fg_r <- atanh(g_r) # Test Statistics
    
    
    new_Sigma_X <- t(G_j) %*% Sigma_X %*% G_j
    new_var_X <- diag(new_Sigma_X)
    new_std_X <- sqrt(new_var_X)
    mix_coef <- G_j / new_std_X / std_y
    
    model_jags <- function(){
      for(i in 1:(p-1)){
        Fg_r[i] ~ dnorm(Fg_rho[i], n-3) # It uses precision rather than var here
      }
      
      Fg_rho <- arctanh(g_rho)
      g_rho <- t(mix_coef) %*% rho
      rho <- tanh(F_rho)
      F_rho ~ dmnorm( mu , eye) # It uses precision rather than var here
      mu ~ ddirch( alpha )
    }
    
    jags_data <- list(p=p, n=n, Fg_r=Fg_r, alpha=rep(alpha, p), mix_coef=mix_coef, eye=diag(p))
    jags_sims_mv <- jags(data = jags_data,
                         model.file = model_jags,
                         parameters.to.save = c("F_rho"),
                         n.iter = n.iter,
                         n.burnin = n.burnin,
                         progress.bar = "none")
    
    
    Result <- as.mcmc(jags_sims_mv)
    name <- str_c("F_rho.", j, ".")
    samples <- (data.frame(as.matrix(Result))[name])[,1]
    c(mean(samples),  var(samples))
  }
  #stop cluster
  stopCluster(cl)
  

  return(finalMatrix)
}


get_nonindpt_boot <- function(Cor_F_r, F_r, n, p){
  cores=detectCores()
  cl <- makeCluster(cores[1]-1) #not to overload your computer
  registerDoParallel(cl)
  
  finalMatrix <- foreach(j=1:p, 
                         .combine=cbind, 
                         .packages = "pracma",
                         .verbose=TRUE) %dopar% {
    G_j <- nullspace(t(Cor_F_r[j,]))
    indirect_info <- t(G_j) %*% F_r
    
    mu_MLE <- one %*% inv(t(G_j) %*% one) %*% indirect_info
    psi2_MLE <- (p/(p-1)*var(indirect_info) - 1/(n-3))[1,1]
    
    temp <- G_j %*%inv(t(G_j)%*% Cor_F_r %*% G_j) %*% t(G_j)
    V <- inv( diag(p)/psi2_MLE + temp)
    m <- V %*% ( (1 / psi2_MLE)* as.matrix(rep(1, p)*mu_MLE) + temp %*% F_r)
    
    tilde_m <- V[j,j]
    tilde_v <- m[j]
    umpu_p <- 1 - abs(pnorm(F_r[j]*sqrt(n-3), 0, 1) - 
                      pnorm(-F_r[j]*sqrt(n-3), 0, 1) )
    fab_p <- 1 - abs(pnorm(F_r[j]*sqrt(n-3) + 2*tilde_m*sqrt(n-3)/tilde_v , 0, 1) - 
                      pnorm(-F_r[j]*sqrt(n-3), 0, 1) )
    c(fab_p, umpu_p)
  }
}


get_nonindpt_gene <- function(Cor_F_r, F_r, n, p, one, verbose=FALSE){
  cores=detectCores()
  cl <- makeCluster(cores[1]-1) #not to overload your computer
  registerDoParallel(cl)
  
  finalMatrix <- foreach(j=1:p, 
                         .combine=cbind, 
                         .packages = "pracma",
                         .verbose=verbose) %dopar% {
                           return(c(1,2))
                         }
  return(finalMatrix)
}


tensor_to_group_mtx <- function(whole_tensor, group_subset_info){
  num_obs <- dim(group_subset_info)[1]
  group_mtx <- NULL
  for(obs_idx in 1:num_obs){
    row_idx <- group_subset_info$row_idx[obs_idx]
    col_idx <- group_subset_info$col_idx[obs_idx]
    group_mtx <- rbind(group_mtx, whole_tensor[, row_idx, col_idx])
  }
  
  
  return(group_mtx)
}


getFDRCompResults <- function(FAB_ps, UMPU_ps, F_r_ref, alphas){
  adapt_df <- data.frame( cbind(c(F_r_ref), c(UMPU_ps)) )
  colnames(adapt_df) <- c("F_r_ref", "pvals")
  adapt_df <- adapt_df[!is.infinite(adapt_df$F_r_ref),]
  adapt_df <- na.omit(adapt_df)
  adapt_df$x <- sort(adapt_df$F_r_ref, index.return=TRUE)$ix
  
  res <- adaptMT::adapt_glmnet(x = as.matrix(adapt_df[, c("x", "x") ]),
                               pvals = adapt_df$pvals, 
                               alphas = alphas)

  UMPU_clean_ps <- c(UMPU_ps)
  FAB_clean_ps <- c(FAB_ps)
  
  FDR_Data <- NULL
  UMPU_padjust <- p.adjust(c(UMPU_ps), method = "BH")
  FAB_padjust <- p.adjust(c(FAB_ps), method = "BH")
  for(alpha in alphas)
  {
    UMPU_FDR <- sum( UMPU_padjust < alpha ) 
    FAB_FDR <- sum( FAB_padjust < alpha ) 
    print( paste("FDR controlled at :", alpha, " UMPU discovery : ", UMPU_FDR, " FAB discovery : ", FAB_FDR ) )
    FDR_Data <- rbind(FDR_Data, c(UMPU_FDR, FAB_FDR) )
  }
  colnames(FDR_Data) <- c("UMPU", "FAB")
  FDR_Data <- as.data.frame(FDR_Data)
  FDR_Data$AdaPT <- res$nrejs
  FDR_Data_temp <- gather(FDR_Data, key = "Test", value = "Discovery")
  FDR_Data_temp$FDR <- c(alphas, alphas, alphas )
  
  return(FDR_Data_temp)
}

getObsFDR <- function(n, ref_n, p, num_in_group, alphas, R=2000)
{
  data_info_sim_boot <- gen_sim_data(n=n, ref_n=ref_n, p=p, num_in_group=num_in_group)
  results_boot <- func_sim_boot(data_info_sim_boot, R=R)
  sim_truth <- ifelse(results_boot$Sigma != 0, "ALTER", "NULL")
  
  sim_pval_truth_df <- data.frame(cbind(c(results_boot$FAB_ps), c(results_boot$UMPU_ps), c(sim_truth)))
  colnames(sim_pval_truth_df) <- c("FAB_pvals", "UMPU_pvals", "truth")
  
  sim_pval_truth_df$FAB_p.adjust <- p.adjust(sim_pval_truth_df$FAB_pvals, method = "BH")
  sim_pval_truth_df$UMPU_p.adjust <- p.adjust(sim_pval_truth_df$UMPU_pvals, method = "BH")
    
  obs_FDRs <- NULL
  for(alpha in alphas)
  {
    #FAB
    sim_pval_truth_df[, paste("FAB", as.character(alpha))] <- ifelse(sim_pval_truth_df$FAB_p.adjust < alpha, "ALTER", "NULL" )
    FAB_R <- sum(sim_pval_truth_df[, paste("FAB", as.character(alpha))] == "ALTER")
    FAB_V <- sum(sim_pval_truth_df[, paste("FAB", as.character(alpha))] == "ALTER" & sim_pval_truth_df$truth == "NULL")
    FAB_obs_FDR <- FAB_V/FAB_R

    #UMPU
    # sim_pval_truth_df[, paste("UMPU", as.character(alpha))] <- ifelse(sim_pval_truth_df$UMPU_p.adjust < alpha, "ALTER", "NULL" )
    # UMPU_R <- sum(sim_pval_truth_df[, paste("UMPU", as.character(alpha))] == "ALTER")
    # UMPU_V <- sum(sim_pval_truth_df[, paste("UMPU", as.character(alpha))] == "ALTER" & sim_pval_truth_df$truth == "NULL")
    # UMPU_obs_FDR <- UMPU_V/UMPU_R
    
    # obs_FDRs <- rbind( obs_FDRs, c(FAB_obs_FDR, UMPU_obs_FDR, alpha) )
    obs_FDRs <- rbind(obs_FDRs, c("FAB", FAB_obs_FDR, alpha))
    # obs_FDRs <- rbind(obs_FDRs, c("UMPU", UMPU_obs_FDR, alpha))
  }
  # colnames(obs_FDRs) <- c("FAB_obs_FDR", "UMPU_obs_FDR", "Theoretical FDR")
  colnames(obs_FDRs) <- c("Test", "Observed_FDR", "Theoretical_FDR")
  obs_FDRs <- obs_FDRs[ order(obs_FDRs[,"Test"], obs_FDRs[,"Theoretical_FDR"]),]
  return(data.frame(obs_FDRs))
}

getObsFDRManyTimes <- function(n, ref_n, p, num_in_group, alphas, R=2000, I)
{

  ObsFDRResults <- NULL
  for(i in 1:I)
  {
    oneFDRResult <- getObsFDR(n, ref_n, p, num_in_group, alphas, R)
    TestNameCol <- oneFDRResult[, c("Test")]
    TestValueCol <- oneFDRResult[, c("Observed_FDR", "Theoretical_FDR")]
    ObsFDRResults <- abind(ObsFDRResults, 
                           apply( as.matrix(TestValueCol), 2, as.numeric), 
                           along = 3)
  }
  finalResult <- apply(ObsFDRResults, c(1,2), mean)
  finalResult <- data.frame(finalResult)
  finalResult$Test <- TestNameCol
  return(finalResult)
}


###########################
######## Make Plots #######
###########################


makeRejPlot <- function(algoResults, have_Truth = TRUE){
  UMPU_ps <- algoResults$UMPU_ps 
  FAB_ps <- algoResults$FAB_ps 
  UMPU_rej <- ifelse(UMPU_ps<0.05, "REJ", "NULL")
  FAB_rej <- ifelse(FAB_ps<0.05, "REJ", "NULL")
  
  if(have_Truth) Sigma <- algoResults$Sigma
  if(have_Truth) truth <- ifelse(Sigma==0, "NULL", "ALTER")
  
  melted_UMPU_rej <- melt(UMPU_rej)
  UMPU_rej <- ggplot(data = melted_UMPU_rej, aes(x=Var1, y=Var2, fill=value)) + 
    geom_tile() + ggtitle("UMPU Rejection") +
    theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
    xlab("x") + ylab("y") + 
    scale_fill_manual(values=c("black", "green"))
  
  melted_FAB_rej <- melt(FAB_rej)
  FAB_rej <- ggplot(data = melted_FAB_rej, aes(x=Var1, y=Var2, fill=value)) + 
    geom_tile() + ggtitle("FAB Rejection") +
    theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
    xlab("x") + ylab("y") + 
    scale_fill_manual(values=c("black", "green"))
  
  melted_diff <- melt(UMPU_ps >= FAB_ps)
  Diff <- ggplot(data = melted_diff, aes(x=Var1, y=Var2, fill=value)) + 
    geom_tile() + ggtitle("p_UMPU >= p_FAB") +
    theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
    xlab("x") + ylab("y") + 
    scale_fill_manual(values=c("black", "green"))
  
  if(have_Truth)
  {
    melted_truth <- melt(truth)
    Truth <- ggplot(data = melted_truth, aes(x=Var1, y=Var2, fill=value)) + 
      geom_tile() + ggtitle("Ground Truth") +
      theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
      xlab("x") + ylab("y") + 
      scale_fill_manual(values=c("green", "black"))
  }
  
  results <- hash()
  results[["UMPU_rej"]] <- UMPU_rej
  results[["FAB_rej"]] <- FAB_rej
  results[["Diff"]] <- Diff
  if(have_Truth) results[["Truth"]] <- Truth
  
  return(results)
}


makeUMPUvsFABPlot <- function(algoResults, have_Truth = TRUE){
  
  UMPU_ps <- algoResults$UMPU_ps 
  FAB_ps <- algoResults$FAB_ps
  
  if(have_Truth){
    Sigma <- algoResults$Sigma 
    truth <- ifelse(Sigma==0, "NULL", "ALTER")
    
    UMPU_FAB <- data.frame(UMPU = UMPU_ps[lower.tri(UMPU_ps, diag = FALSE)],
                           FAB = FAB_ps[lower.tri(FAB_ps, diag = FALSE)],
                           Truth = truth[lower.tri(truth, diag = FALSE)])
    
    UMPUvsFAB <- ggplot(UMPU_FAB, aes(x=UMPU, y=FAB, color=Truth)) + 
      geom_point(alpha=0.5, size=2, aes(shape=Truth)) +
      labs(title="UMPU_p vs FAB_p", x="UMPU p-value", y = "FAB p-value") +
      theme(plot.title = element_text(hjust = 0.5))
  } 
  else
  {
    UMPU_FAB <- data.frame(UMPU = UMPU_ps[lower.tri(UMPU_ps, diag = FALSE)],
                           FAB = FAB_ps[lower.tri(FAB_ps, diag = FALSE)])
    
    UMPUvsFAB <- ggplot(UMPU_FAB, aes(x=UMPU, y=FAB)) +
      geom_point(size=1, alpha=0.05) +
      labs(title="UMPU_p vs FAB_p", x="UMPU p-value", y = "FAB p-value") +
      theme(plot.title = element_text(hjust = 0.5))
  }
  
  return(UMPUvsFAB)
}


makePDistPlot <- function(algoResults, have_Truth = TRUE){
  bins <- 20
  breaks <- seq(0, 1, 0.05)
  
  UMPU_ps <- algoResults$UMPU_ps 
  FAB_ps <- algoResults$FAB_ps 
  
  c1 <- rgb(100,100,255, max = 255, alpha = 100, names = "lt.blue")
  c2 <- rgb(255,100,100, max = 255, alpha = 100, names = "lt.pink")
  
  if(have_Truth)
  {
    Sigma <- algoResults$Sigma 
    null_idx_cbind <- algoResults$null_idx_cbind 
    alter_idx_cbind <- algoResults$alter_idx_cbind
    
    UMPU_true_null <- UMPU_ps[null_idx_cbind]
    FAB_true_null <- FAB_ps[null_idx_cbind]
    
    UMPU_alter <- UMPU_ps[alter_idx_cbind]
    FAB_alter <- FAB_ps[alter_idx_cbind]
    
    UMPU_null <- ggplot(as.data.frame(UMPU_true_null), aes(x = UMPU_true_null, y =..density..)) +
      geom_histogram(aes(x = UMPU_true_null, y =..density..),stat="bin", breaks = breaks, boundary = 1, fill=c1 )+
      theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
      labs(title="UMPU null p-value distribution", x="p", y = "Density")
    FAB_null <- ggplot(as.data.frame(FAB_true_null), aes(x = FAB_true_null, y =..density..)) +
      geom_histogram(aes(x = FAB_true_null, y =..density..),stat="bin", breaks = breaks, boundary = 1, fill=c2 )+
      theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
      labs(title="FAB null p-value distribution", x="p", y = "Density")
    
    UMPU_power <- ggplot(as.data.frame(UMPU_alter), aes(x = UMPU_alter, y =..density..)) +
      geom_histogram(aes(x = UMPU_alter, y =..density..),stat="bin", breaks = breaks, boundary = 1, fill=c1 )+
      theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
      labs(title="UMPU alternative p-value distribution", x="p", y = "Density")
    FAB_power <- ggplot(as.data.frame(FAB_alter), aes(x = FAB_alter, y =..density..)) +
      geom_histogram(aes(x = FAB_alter, y =..density..),stat="bin", breaks = breaks, boundary = 1, fill=c2 )+
      theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
      labs(title="FAB alternative p-value distribution", x="p", y = "Density")
  
    flat_UMPU_ps <- UMPU_alter[lower.tri(UMPU_ps, diag = FALSE)]
    flat_FAB_ps <- FAB_alter[lower.tri(FAB_ps, diag = FALSE)]
    
    sorted_flat_UMPU <- sort(flat_UMPU_ps)
    sorted_flat_FAB <- sort(flat_FAB_ps)
    
    sorted_ps <- data.frame(cbind(sorted_flat_UMPU, sorted_flat_FAB))
    sorted_ps$rank <- 1:dim(sorted_ps)[1]
    
    max_idx <- max(sum(sorted_flat_UMPU<0.05), sum(sum(sorted_flat_FAB<0.05)))
    
    df <- sorted_ps %>%
      gather(key = "variable", value = "value", -rank)
    
    Rank <- ggplot(df, aes(x=rank, y=value)) +
      geom_line(size=2, aes(color = variable, linetype = variable)) +
      theme(plot.title = element_text(hjust = 0.5), legend.position="right") +
      labs(title="Ranked (unmatched) false null p-value", x="rank", y = "p-value") +
      xlim(0, max_idx) +
      ylim(0, 0.05)
    
    results <- hash()
    results[["UMPU_null"]] <- UMPU_null
    results[["FAB_null"]] <- FAB_null
    results[["UMPU_power"]] <- UMPU_power
    results[["FAB_power"]] <- FAB_power
    results[["Rank"]] <- Rank
    }
  else
  {
    flat_UMPU_ps <- UMPU_ps[lower.tri(UMPU_ps, diag = FALSE)]
    flat_FAB_ps <- FAB_ps[lower.tri(FAB_ps, diag = FALSE)]
    
    sorted_flat_UMPU <- sort(flat_UMPU_ps)
    sorted_flat_FAB <- sort(flat_FAB_ps)
    
    sorted_ps <- data.frame(cbind(sorted_flat_UMPU, sorted_flat_FAB))
    colnames(sorted_ps) <- c("UMPU", "FAB")
    sorted_ps$rank <- 1:dim(sorted_ps)[1]
    
    max_idx <- max(sum(sorted_flat_UMPU<0.05), sum(sum(sorted_flat_FAB<0.05)))
    
    df <- sorted_ps %>%
      gather(key = "Test", value = "value", -rank)
    
    Rank <- ggplot(df, aes(x=rank, y=value)) +
      theme_light() +
      geom_line(size=1, aes(color = Test, linetype = Test)) +
      theme(plot.title = element_text(hjust = 0.5), legend.position=c(0.2, 0.8)) +
      labs(x="rank", y = "p-value") +
      xlim(0, max_idx) +
      ylim(0, 0.05)
    
    results <- hash()
    results[["Rank"]] <- Rank
  }
  return(results)
}



makeNullBoot <- function(algoResults, n, B){
  breaks <- seq(0, 1, 0.05)
  
  FAB_ps <- algoResults$FAB_ps
  null_idx_cbind <- algoResults$null_idx_cbind 

  c2 <- rgb(255,100,100, max = 255, alpha = 100, names = "lt.pink")
  
  FAB_true_null <- FAB_ps[null_idx_cbind]
  
  title <- paste("n=", n, " B=", B, sep = "")
  
  FAB_null <- ggplot(as.data.frame(FAB_true_null), aes(x = FAB_true_null, y =..density..)) +
    geom_histogram(aes(x = FAB_true_null, y =..density..),stat="bin", breaks = breaks, boundary = 1, fill=c2, colour = "black" ) +
    theme(plot.title = element_text(hjust = 0.5), legend.position="bottom") +
    labs(title=title)

  return(FAB_null)
}



######################################
######## Make Confusion Matrix #######
######################################
makeConfusionMatrix <- function(algoResults){
  UMPU_ps <- algoResults$UMPU_ps 
  FAB_ps <- algoResults$FAB_ps 
  
  null_idx_cbind <- algoResults$null_idx_cbind 
  alter_idx_cbind <- algoResults$alter_idx_cbind
  num_null <- dim(null_idx_cbind)[1]
  num_alter <- dim(alter_idx_cbind)[1]
  
  UMPU_rej = algoResults$UMPU_ps < 0.05
  UMPU_norej = algoResults$UMPU_ps >= 0.05
  
  UMPU_correct_norej <- sum(UMPU_norej[null_idx_cbind])
  UMPU_correct_rej <- sum(UMPU_rej[alter_idx_cbind])
  UMPU_incorrect_norej <- sum(UMPU_norej[alter_idx_cbind])
  UMPU_incorrect_rej <- sum(UMPU_rej[null_idx_cbind])
  
  UMPU_alpha  <- UMPU_correct_norej / num_null # 1 - Type I
  UMPU_power  <- UMPU_correct_rej / num_alter # 1 - Type II
  UMPU_typeII <- UMPU_incorrect_norej / num_alter # Type II
  UMPU_typeI  <- UMPU_incorrect_rej / num_null # Type I
  
  FAB_rej = algoResults$FAB_ps < 0.05
  FAB_norej = algoResults$FAB_ps >= 0.05
  
  FAB_correct_norej <- sum(FAB_norej[null_idx_cbind])
  FAB_correct_rej <- sum(FAB_rej[alter_idx_cbind])
  FAB_incorrect_norej <- sum(FAB_norej[alter_idx_cbind])
  FAB_incorrect_rej <- sum(FAB_rej[null_idx_cbind])
  
  FAB_alpha  <- FAB_correct_norej / num_null   # 1 - Type I
  FAB_power  <- FAB_correct_rej / num_alter   # 1 - Type II
  FAB_typeII <- FAB_incorrect_norej / num_alter   # Type II
  FAB_typeI  <- FAB_incorrect_rej / num_null   # Type I
  
  results <- hash()
  
  results[["UMPU_alpha"]] <- UMPU_alpha
  results[["UMPU_power"]] <- UMPU_power
  results[["UMPU_typeII"]] <- UMPU_typeII
  results[["UMPU_typeI"]] <- UMPU_typeI
  
  results[["FAB_alpha"]] <- FAB_alpha
  results[["FAB_power"]] <- FAB_power
  results[["FAB_typeII"]] <- FAB_typeII
  results[["FAB_typeI"]] <- FAB_typeI
  
  return(results)
}


massiveConfusionExp <- function(n, p, times, method){
  UMPU_alpha_s <- c()
  UMPU_power_s <- c()
  UMPU_typeII_s <- c()
  UMPU_typeI_s <- c()
  FAB_alpha_s <- c()
  FAB_power_s <- c()
  FAB_typeII_s <- c()
  FAB_typeI_s <- c()
  
  for( i in 1:times){
    data_info <- gen_sim_data(n=n, ref_n=5000, p=p, num_in_group=50)
    
    if(method == "idpt"){
      algoResults <- func_sim_idpt(data_info)
    }
    if(method == "boot"){
      algoResults <- func_sim_boot(data_info, R=2000)
    }
    
    confusion_results <- makeConfusionMatrix(algoResults)
    
    UMPU_alpha <- confusion_results[["UMPU_alpha"]]
    UMPU_power <- confusion_results[["UMPU_power"]]
    UMPU_typeII <- confusion_results[["UMPU_typeII"]]
    UMPU_typeI <- confusion_results[["UMPU_typeI"]]
    FAB_alpha <- confusion_results[["FAB_alpha"]]
    FAB_power <- confusion_results[["FAB_power"]]
    FAB_typeII <- confusion_results[["FAB_typeII"]]
    FAB_typeI <- confusion_results[["FAB_typeI"]]
    
    UMPU_alpha_s[i] <- UMPU_alpha
    UMPU_power_s[i] <- UMPU_power
    UMPU_typeII_s[i] <- UMPU_typeII
    UMPU_typeI_s[i] <- UMPU_typeI
    FAB_alpha_s[i] <- FAB_alpha
    FAB_power_s[i] <- FAB_power
    FAB_typeII_s[i] <- FAB_typeII
    FAB_typeI_s[i] <- FAB_typeI
    
    print(paste("Finished time ", i, sep = ""))
  }
  

  UMPU_alpha_final <- mean(UMPU_alpha_s)
  UMPU_power_final <- mean(UMPU_power_s)
  UMPU_typeII_final <- mean(UMPU_typeII_s)
  UMPU_typeI_final <- mean(UMPU_typeI_s)
  FAB_alpha_final <- mean(FAB_alpha_s)
  FAB_power_final <- mean(FAB_power_s)
  FAB_typeII_final <- mean(FAB_typeII_s)
  FAB_typeI_final <- mean(FAB_typeI_s)
  
  confusion_result <- hash()
  confusion_result[["UMPU_alpha"]] <- UMPU_alpha_final
  confusion_result[["UMPU_power"]] <- UMPU_power_final
  confusion_result[["UMPU_typeII"]] <- UMPU_typeII_final
  confusion_result[["UMPU_typeI"]] <- UMPU_typeI_final
  confusion_result[["FAB_alpha"]] <- FAB_alpha_final
  confusion_result[["FAB_power"]] <- FAB_power_final
  confusion_result[["FAB_typeII"]] <- FAB_typeII_final
  confusion_result[["FAB_typeI"]] <- FAB_typeI_final
  
  return(confusion_result)
}

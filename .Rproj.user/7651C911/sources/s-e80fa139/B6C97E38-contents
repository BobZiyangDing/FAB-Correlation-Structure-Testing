---
title: "Sim_covStruct_DnQ_more_power"
output: html_document
---

Suppose we have a free dataset for reference, then we can do FAB corr test for free. This gives a simulation for such a situation and we can test the cov structure. This is to use independent data for the purpose

```{r setup, include=FALSE}
library(Rcpp)
library(fabricatr)
library(mltools)
library(onehot)
library(mgcv)
library(tidyverse)
library(foreach)
library(doParallel)
library(kableExtra)
library(boot)
library(tensorr)
library(reshape2)
library(dvmisc)
library(tidyverse)
source("Utils.R")
source("pfilter.R")
setwd("~/FABBrainConnectome/FAB_corr")
set.seed(123)
options(warn=-1)
```

```{r params}
n <- 5000
p <- 200

ref_n <- 5000
ttl <- p*(p-1)/2

num_in_group <- 500
num_groups <- ttl %/% num_in_group
num_null <- ttl %/% 2
```

```{r generate-uncorrelated-data-huge, message=FALSE, warning=FALSE}
mu <- runif(p, -100, 100)
eigens <- runif(p, 1, 1000)
Sigma <- genPositiveDefMat(p, covMethod = 'eigen', eigenvalue = eigens)$Sigma

zero_idx <- sample.int(ttl, num_null)

null_idx_cbind <- NULL
alter_idx_cbind <- NULL
count <- 1
for(i in 2:p){
  for(j in 1:(i-1)){
    if(count %in% zero_idx){
      Sigma[i, j] <- 0
      Sigma[j, i] <- 0
      null_idx_cbind <- rbind(null_idx_cbind, c(i, j))
    }
    else{
      alter_idx_cbind <- rbind(alter_idx_cbind, c(i, j))
    }
    count = count + 1
  }
}

data_raw <- data.frame(mvrnorm(n, mu, Sigma))
data_ref <- data.frame(mvrnorm(ref_n, mu, Sigma))

dim(data_raw)
dim(data_ref)
```

```{r all type of n and all type of F_r}
# UMPU F_r
F_r <- atanh(cor(data_raw, use = "pairwise.complete.obs"))
# external reference group F_r for Z score
F_r_ref <- atanh(cor(data_ref, use = "pairwise.complete.obs"))

```


```{r Factor loading matrix get one}
group_idx <- NULL
for(i in 2:p){
  for(j in 1:(i-1)){
    group_idx <- rbind(group_idx, c(i, j, F_r_ref[i, j]))
  }
}
group_idx <- data.frame(group_idx)

colnames(group_idx) <- c("row_idx", "col_idx", "F_r_value")
group_idx <- group_idx[order(group_idx$F_r_value), ]
group_idx$group_idx <- as.numeric(split_quantile(x = 1:ttl, type = num_groups))
```

```{r}
get_group_F_r <- function(group_subset, F_r){
  group_index_list <- group_subset %>% dplyr::select(row_idx, col_idx) %>% as.matrix()
  group_F_r <- F_r[group_index_list]
  return(group_F_r)
}
```


```{r}
FAB_ps <- diag(p)

for(idx in 1:num_groups){
  group_subset <- subset(group_idx, group_idx==idx)
  group_direct_F_r <- get_group_F_r(group_subset, F_r)
  group_indirect_F_r <- get_group_F_r(group_subset, F_r_ref)

  group_p <- dim(group_subset)[1]

  for(j in 1:group_p){
    group_indirect_info <- group_indirect_F_r[-j]
    mu_MLE <- mean(group_indirect_info)
    psi2_MLE <- group_p/(group_p-1)*var(group_indirect_info) - 1/(ref_n-3) + 0.5

    tilde_m <- mu_MLE
    tilde_v <- psi2_MLE
    
    fab_p <- 1 - abs(pnorm(group_direct_F_r[j]*sqrt(n-3) + 2*tilde_m*sqrt(ref_n-3)/tilde_v , 0, 1) - 
                      pnorm(-group_direct_F_r[j]*sqrt(n-3), 0, 1) )
    umpu_p <- 1 - abs(pnorm(group_direct_F_r[j]*sqrt(n-3) , 0, 1) - 
                      pnorm(-group_direct_F_r[j]*sqrt(n-3), 0, 1) )

    row_idx = group_subset$row_idx[j]
    col_idx = group_subset$col_idx[j]
    FAB_ps[row_idx, col_idx] = fab_p
    FAB_ps[col_idx, row_idx] = fab_p
  }
  if(idx %% 100 == 0){
    print(idx)
  }
}

UMPU_ps <- 1 - abs(pnorm(F_r*sqrt(n-3), 0, 1) - pnorm(-F_r*sqrt(n-3), 0, 1) )


```


```{r}
# 
UMPU_rej <- ifelse(UMPU_ps<0.05, 1, 0)
FAB_rej <- ifelse(FAB_ps<0.05, 1, 0)
truth <- ifelse(Sigma==0, 0, 1)
# 
melted_UMPU_rej <- melt(UMPU_rej)
ggplot(data = melted_UMPU_rej, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile()

melted_FAB_rej <- melt(FAB_rej)
ggplot(data = melted_FAB_rej, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile()

melted_diff <- melt(UMPU_ps - FAB_ps)
ggplot(data = melted_diff, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile()


melted_truth <- melt(truth)
ggplot(data = melted_truth, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile()


UMPU_FAB <- data.frame(UMPU = UMPU_ps[lower.tri(UMPU_ps, diag = FALSE)],
                       FAB = FAB_ps[lower.tri(FAB_ps, diag = FALSE)])

ggplot(UMPU_FAB, aes(x=UMPU, y=FAB)) + 
        geom_point(size=2, alpha=0.1) + 
        labs(title="UMPU vs FAB", x="rank", y = "p-value") 
```


```{r}

c1 <- rgb(100,100,255, max = 255, alpha = 100, names = "lt.blue")
c2 <- rgb(255,100,100, max = 255, alpha = 100, names = "lt.pink")

UMPU_true_null <- UMPU_ps[null_idx_cbind]
FAB_true_null <- FAB_ps[null_idx_cbind]

UMPU_alter <- UMPU_ps[alter_idx_cbind]
FAB_alter <- FAB_ps[alter_idx_cbind]

hist(UMPU_true_null, col=c1)
hist(FAB_true_null, col=c2)
# power_UMPU <- hist(UMPU_alter, plot=FALSE)
# power_FAB <- hist(FAB_alter, plot=FALSE)
# 
# plot(power_FAB, col=c2)
# plot(power_UMPU, col=c1, add=TRUE)

hist(UMPU_alter, col=c1)
hist(FAB_alter, col=c2)


```


```{r}
flat_UMPU_ps <- UMPU_alter[lower.tri(UMPU_ps, diag = FALSE)]
flat_FAB_ps <- FAB_alter[lower.tri(FAB_ps, diag = FALSE)]

sorted_flat_UMPU <- sort(flat_UMPU_ps)
sorted_flat_FAB <- sort(flat_FAB_ps)

sorted_ps <- data.frame(cbind(sorted_flat_UMPU, sorted_flat_FAB))
sorted_ps$rank <- 1:dim(sorted_ps)[1]



max_idx <- max(sum(sorted_flat_UMPU<0.05), sum(sum(sorted_flat_FAB<0.05)))

df <- sorted_ps %>%
  gather(key = "variable", value = "value", -rank)

ggplot(df, aes(x=rank, y=value)) + 
        geom_line(size=2, aes(color = variable, linetype = variable)) + 
        labs(title="Ranked (unmatched) P-value", x="rank", y = "p-value") +
        xlim(0, max_idx) + 
        ylim(0, 0.05)
```


```{r}
h1 <- hist(F_r[null_idx_cbind], breaks=50, plot=FALSE)
h2 <- hist(F_r[alter_idx_cbind], breaks=50, plot=FALSE)

plot(h1, col=c1)
plot(h2, col=c2)


```











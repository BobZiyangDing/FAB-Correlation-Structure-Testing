---
title: "Application_covStruct"
output: html_document
---


```{r setup, include=FALSE}
library(Rcpp)
library(affy)
library(fabricatr)
library(mltools)
library(onehot)
library(mgcv)
library(tidyverse)
library(foreach)
library(doParallel)
library(kableExtra)
library(boot)
library(tensorr)
library(reshape2)
library(dvmisc)
source("Utils.R")
source("pfilter.R")
sourceCpp("Cov_struct_func.cpp")
setwd("~/FABBrainConnectome/FAB_corr")
set.seed(12345)
options(warn=-1)
```


```{r generate-uncorrelated-data-huge, message=FALSE, warning=FALSE}
n <- 1000
p <- 500

mu <- runif(p, -100, 100)
eigens <- runif(p, 1, 1000)
Sigma <- genPositiveDefMat(p, covMethod = 'eigen', eigenvalue = eigens)$Sigma

ttl <- p*(p-1)/2
num_null <- ttl %/% 4 * 3

zero_idx <- sample.int(ttl, num_null)

null_idx_cbind <- NULL
alter_idx_cbind <- NULL
count <- 1
for(i in 2:p){
  for(j in 1:(i-1)){
    if(count %in% zero_idx){
      Sigma[i, j] <- 0
      Sigma[j, i] <- 0
      null_idx_cbind <- rbind(null_idx_cbind, c(i, j))
    }
    else{
      alter_idx_cbind <- rbind(alter_idx_cbind, c(i, j))
    }
    count = count + 1
  }
}

data_raw <- mvrnorm(n, mu, Sigma)
dim(data_raw)

ref_n <- 250
data_ref <- mvrnorm(ref_n, mu, Sigma)
dim(data_ref)
```

```{r}
get_cor <- function(data, i){
  sub_data <- data[i, ]
  return(atanh(cor(sub_data)))
}
```

```{r}
F_r <- cor(data_raw)
F_r_ref <- cor(data_ref, use = "pairwise.complete.obs")
```


```{r try-bootstrap}
cores=detectCores()
R = 1000
bootobject <- boot(data = data_ref, statistic = get_cor, R=R, parallel = "multicore", ncpus = cores)

bootsample <- array(0, c(R, p, p))
for(i in 1:R){
  bootsample[i, ,] = matrix(bootobject$t[i, ], nrow=p)
}

rm(bootobject)
```

#################################################################################
Factor Loading Matrix need to be independent from what it was
#################################################################################

```{r This is actually wrong but original}
num_groups <- ttl %/% 10

group_idx <- NULL
for(i in 2:p){
  for(j in 1:(i-1)){
    group_idx <- rbind(group_idx, c(i, j, F_r_ref[i, j]))
  }
}
group_idx <- data.frame(group_idx)

colnames(group_idx) <- c("row_idx", "col_idx", "F_r_value")
group_idx <- group_idx[order(group_idx$F_r_value), ]
group_idx$group_idx <- as.numeric(split_quantile(x = 1:ttl, type = num_groups))

```

```{r This should be right}
# num_groups <- 1000
# group_id_list <- data.frame(split_quantile(x = seq(1, ttl), type = num_groups))
# rows <- sample(nrow(group_id_list))
# group_id_list <- group_id_list[rows, ]
# # group_mat <- matrix(as.numeric(split_quantile(x = F_r, type = num_groups)), nrow=p)
# 
# group_idx <- NULL
# for(i in 2:p){
#   for(j in 1:(i-1)){
#     group_idx <- rbind(group_idx, c(i, j))
#   }
# }
# 
# group_idx <- data.frame(group_idx)
# group_idx$group_idx <- group_id_list
# colnames(group_idx) <- c("row_idx", "col_idx", "group_idx")
```

#################################################################################
End of revision
#################################################################################

```{r}

UMPU_ps <- diag(p)
FAB_ps <- diag(p)


for(idx in 1:num_groups){
  group_subset <- subset(group_idx, group_idx==idx)
  group_mtx <- tensor_to_group_mtx(bootsample, group_subset)
  group_Cor_F_r <- cor(t(group_mtx))
  group_F_r <- F_r[cbind(group_subset$row_idx, group_subset$col_idx)]
  group_p <- dim(group_subset)[1]
  group_result <- getFABnUMPUpvals(group_Cor_F_r, group_F_r, n, group_p)
  
  for(i in 1:group_p){
    row_idx = group_subset$row_idx[i]
    col_idx = group_subset$col_idx[i]
    UMPU_ps[row_idx, col_idx] = group_result[1, i]
    UMPU_ps[col_idx, row_idx] = group_result[1, i]
    FAB_ps[row_idx, col_idx] = group_result[2, i]
    FAB_ps[col_idx, row_idx] = group_result[2, i]
  }
  if(idx %% 500 == 0){
    print(idx)
  }
}

```


```{r}

UMPU_rej <- ifelse(UMPU_ps<0.05, 1, 0)
FAB_rej <- ifelse(FAB_ps<0.05, 1, 0)
truth <- ifelse(Sigma==0, 0, 1)

melted_UMPU_rej <- melt(UMPU_rej)
ggplot(data = melted_UMPU_rej, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()

melted_FAB_rej <- melt(FAB_rej)
ggplot(data = melted_FAB_rej, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()

melted_diff <- melt(UMPU_ps - FAB_ps)
ggplot(data = melted_diff, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()


melted_truth <- melt(truth)
ggplot(data = melted_truth, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()


```

```{r}

c1 <- rgb(100,100,255, max = 255, alpha = 100, names = "lt.blue")
c2 <- rgb(255,100,100, max = 255, alpha = 100, names = "lt.pink")

UMPU_true_null <- UMPU_ps[null_idx_cbind]
FAB_true_null <- FAB_ps[null_idx_cbind]

UMPU_alter <- UMPU_ps[alter_idx_cbind]
FAB_alter <- FAB_ps[alter_idx_cbind]

hist(UMPU_true_null, col=c1)
hist(FAB_true_null, col=c2)
power_UMPU <- hist(UMPU_alter, plot=FALSE)
power_FAB <- hist(FAB_alter, plot=FALSE)

plot(power_FAB, col=c2)
plot(power_UMPU, col=c1, add=TRUE)
```

```{r}
flat_UMPU_ps <- UMPU_ps[lower.tri(UMPU_ps, diag = FALSE)]
flat_FAB_ps <- FAB_ps[lower.tri(FAB_ps, diag = FALSE)]

sorted_flat_UMPU <- sort(flat_UMPU_ps)
sorted_flat_FAB <- sort(flat_FAB_ps)

sorted_ps <- data.frame(cbind(sorted_flat_UMPU, sorted_flat_FAB))
sorted_ps$rank <- 1:ttl

max_idx <- max(sum(sorted_flat_UMPU<0.05), sum(sum(sorted_flat_FAB<0.05)))

df <- sorted_ps %>%
  gather(key = "variable", value = "value", -rank)

ggplot(df, aes(x=rank, y=value)) + 
        geom_line(size=2, aes(color = variable, linetype = variable)) + 
        labs(title="Ranked (unmatched) P-value", x="rank", y = "p-value") +
        xlim(0, max_idx) + 
        ylim(0, 0.05)
```


```{r}
h1 <- hist(F_r[null_idx_cbind], breaks=50, plot=FALSE)
h2 <- hist(F_r[alter_idx_cbind], breaks=50, plot=FALSE)

plot(h1, col=c1)
plot(h2, col=c2)


```

```{r}
group_idx <- group_idx[order(group_idx$col_idx, group_idx$row_idx), ]
group_idx$FAB_ps <- flat_FAB_ps
group_idx$UMPU_ps <- flat_UMPU_ps

alpha = c(0.2)
FAB_Discoveries = pfilter(group_idx$FAB_ps, alpha, matrix(group_idx$group_idx))
UMPU_Discoveries = pfilter(group_idx$UMPU_ps, alpha, matrix(c(1:ttl)))

sum(FAB_Discoveries)
sum(UMPU_Discoveries)
```




